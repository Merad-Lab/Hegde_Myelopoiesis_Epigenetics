---
title: "Hegde et al - 2025 - Myelopoiesis Epigenetics"
title-block-banner: true
subtitle: "Mouse Bone Marrow (KP; Nfe2l2) scATAC-seq analysis"
format: html
editor: visual
html:
  embed-resources: true
---

## Load libraries

```{r}
library(tidyverse)
library(Seurat)
library(SeuratExtend)
library(Signac)
library(scDblFinder)
library(GenomicRanges)
library(rtracklayer)
library(plyranges)
library(patchwork)
library(JASPAR2020)
library(TFBSTools)
library(EnsDb.Mmusculus.v79)
library(BSgenome.Mmusculus.UCSC.mm10)

annotations = GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevels(annotations) = paste0('chr', seqlevels(annotations))
genome(annotations) = "mm10"
'%notin%' <- function(x,y)!('%in%'(x,y))

start_time = Sys.time()
```

## Load data

```{r, eval=FALSE}
sampleID = "BM_WT"
counts_mat = Read10X_h5(filename = paste0("data/", sampleID, "/filtered_peak_bc_matrix.h5"))
metadata_df = read.csv(file = paste0("data/", sampleID, "/singlecell.csv"), 
                       header = TRUE, row.names = 1)

chrom_assay = CreateChromatinAssay(counts = counts_mat, sep = c(":", "-"), 
                                   fragments = paste0("data/", sampleID, "/fragments.tsv.gz"),
                                   min.cells = 10, min.features = 200)

BM_WT = CreateSeuratObject(counts = chrom_assay, assay = "peaks", meta.data = metadata_df)

peaks_keep = seqnames(granges(BM_WT)) %in% standardChromosomes(granges(BM_WT))
BM_WT = BM_WT[as.vector(peaks_keep), ]
Annotation(BM_WT) = annotations

BM_WT$dataset = sampleID
BM_WT = NucleosomeSignal(object = BM_WT)
BM_WT = TSSEnrichment(object = BM_WT, fast = T)
BM_WT$blacklist_ratio = BM_WT$blacklist_region_fragments / BM_WT$peak_region_fragments
BM_WT$pct_reads_in_peaks = BM_WT$peak_region_fragments / BM_WT$passed_filters * 100
BM_WT$percent.mt = BM_WT$mitochondrial / BM_WT$passed_filters * 100
BM_WT = subset(BM_WT, percent.mt < 25)
low_prf = quantile(BM_WT$peak_region_fragments, probs = 0.02)
hig_prf = quantile(BM_WT$peak_region_fragments, probs = 0.995)
low_prp = quantile(BM_WT$pct_reads_in_peaks, probs = 0.02)
hig_ns = quantile(BM_WT$nucleosome_signal, probs = 0.995)
low_ts = quantile(BM_WT$TSS.enrichment, probs = 0.02)

scEX_SampleObject = as.SingleCellExperiment(BM_WT)
scEX_SampleObject = scDblFinder(scEX_SampleObject, 
                                aggregateFeatures=TRUE, 
                                nfeatures=25, 
                                processing="normFeatures")

class = scEX_SampleObject$scDblFinder.class; BM_WT$Class = class
score = scEX_SampleObject$scDblFinder.score; BM_WT$Score = score
weight = scEX_SampleObject$scDblFinder.weighted; BM_WT$Weight = weight

BM_WT = subset(BM_WT, subset = Class == "singlet")
BM_WT = subset(x = BM_WT, 
               subset = peak_region_fragments > low_prf & peak_region_fragments < hig_prf &
                        pct_reads_in_peaks > low_prp &
                        blacklist_ratio < 0.01 &
                        nucleosome_signal < hig_ns &
                        TSS.enrichment > low_ts)

peaks = CallPeaks(object = BM_WT, group.by = "orig.ident",
                  macs2.path = "/opt/miniconda3/envs/scrna_env/bin/macs3", 
                  additional.args = "-f BEDPE -g 2.6e9 -q 0.2")

selected_chromosomes <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", 
                          "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", 
                          "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", 
                          "chrX", "chrY", "chrMT")

peaks <- subset(peaks, seqnames %in% selected_chromosomes)
seqlevels(peaks) <- seqlevelsInUse(peaks)
seqnames(peaks) <- droplevels(seqnames(peaks))
saveRDS(peaks, file = paste0(output_dir, sampleID, "_macs3_peaks.rds"))

feature_matrix <- FeatureMatrix(fragments = Fragments(BM_WT), 
                                features = peaks)

chrom_assay <- CreateChromatinAssay(counts = feature_matrix, 
                                    fragments = Fragments(BM_WT), 
                                    annotation = Annotation(BM_WT))

# Add to Seurat object
BM_WT[["peaks"]] <- chrom_assay
BM_WT = FindTopFeatures(BM_WT, min.cutoff = "q60")
BM_WT = RunTFIDF(BM_WT)
BM_WT = RunSVD(BM_WT)
```

```{r, eval=FALSE}
sampleID = "BM_KO"
counts_mat = Read10X_h5(filename = paste0("data/", sampleID, "/filtered_peak_bc_matrix.h5"))
metadata_df = read.csv(file = paste0("data/", sampleID, "/singlecell.csv"), 
                       header = TRUE, row.names = 1)

chrom_assay = CreateChromatinAssay(counts = counts_mat, sep = c(":", "-"), 
                                   fragments = paste0("data/", sampleID, "/fragments.tsv.gz"),
                                   min.cells = 10, min.features = 200)

BM_KO = CreateSeuratObject(counts = chrom_assay, assay = "peaks", meta.data = metadata_df)

peaks_keep = seqnames(granges(BM_KO)) %in% standardChromosomes(granges(BM_KO))
BM_KO = BM_KO[as.vector(peaks_keep), ]
Annotation(BM_KO) = annotations

BM_KO$dataset = sampleID
BM_KO = NucleosomeSignal(object = BM_KO)
BM_KO = TSSEnrichment(object = BM_KO, fast = T)
BM_KO$blacklist_ratio = BM_KO$blacklist_region_fragments / BM_KO$peak_region_fragments
BM_KO$pct_reads_in_peaks = BM_KO$peak_region_fragments / BM_KO$passed_filters * 100
BM_KO$percent.mt = BM_KO$mitochondrial / BM_KO$passed_filters * 100
BM_KO = subset(BM_KO, percent.mt < 25)
low_prf = quantile(BM_KO$peak_region_fragments, probs = 0.02)
hig_prf = quantile(BM_KO$peak_region_fragments, probs = 0.995)
low_prp = quantile(BM_KO$pct_reads_in_peaks, probs = 0.02)
hig_ns = quantile(BM_KO$nucleosome_signal, probs = 0.995)
low_ts = quantile(BM_KO$TSS.enrichment, probs = 0.02)

scEX_SampleObject = as.SingleCellExperiment(BM_KO)
scEX_SampleObject = scDblFinder(scEX_SampleObject, 
                                aggregateFeatures=TRUE, 
                                nfeatures=25, 
                                processing="normFeatures")

class = scEX_SampleObject$scDblFinder.class; BM_KO$Class = class
score = scEX_SampleObject$scDblFinder.score; BM_KO$Score = score
weight = scEX_SampleObject$scDblFinder.weighted; BM_KO$Weight = weight

BM_KO = subset(BM_KO, subset = Class == "singlet")
BM_KO = subset(x = BM_KO, 
               subset = peak_region_fragments > low_prf & peak_region_fragments < hig_prf &
                        pct_reads_in_peaks > low_prp &
                        blacklist_ratio < 0.01 &
                        nucleosome_signal < hig_ns &
                        TSS.enrichment > low_ts)

peaks = CallPeaks(object = BM_KO, group.by = "orig.ident",
                  macs2.path = "/opt/miniconda3/envs/scrna_env/bin/macs3", 
                  additional.args = "-f BEDPE -g 2.6e9 -q 0.2")

selected_chromosomes <- c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", 
                          "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", 
                          "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", 
                          "chrX", "chrY", "chrMT")

peaks <- subset(peaks, seqnames %in% selected_chromosomes)
seqlevels(peaks) <- seqlevelsInUse(peaks)
seqnames(peaks) <- droplevels(seqnames(peaks))
saveRDS(peaks, file = paste0(output_dir, sampleID, "_macs3_peaks.rds"))

feature_matrix <- FeatureMatrix(fragments = Fragments(BM_KO), 
                                features = peaks)

chrom_assay <- CreateChromatinAssay(counts = feature_matrix, 
                                    fragments = Fragments(BM_KO), 
                                    annotation = Annotation(BM_KO))

# Add to Seurat object
BM_KO[["peaks"]] <- chrom_assay
BM_KO = FindTopFeatures(BM_KO, min.cutoff = "q60")
BM_KO = RunTFIDF(BM_KO)
BM_KO = RunSVD(BM_KO)
```

```{r, eval=FALSE}
joint_atac = merge(BM_WT, BM_KO)
joint_atac = FindTopFeatures(joint_atac, min.cutoff = "q60")
joint_atac = RunTFIDF(joint_atac)
joint_atac = RunSVD(joint_atac)
joint_atac = RunUMAP(joint_atac, reduction = 'lsi', dims = 2:30)
joint_atac = FindNeighbors(joint_atac, reduction = 'lsi', dims = 2:30)
joint_atac = FindClusters(joint_atac, verbose = FALSE, algorithm = 3, resolution = 0.6)
Idents(joint_atac) = "dataset"

ranges <- joint_atac@assays$peaks@ranges
seqinfo(ranges) <- seqinfo(BSgenome.Mmusculus.UCSC.mm10)
joint_atac@assays$peaks@ranges <- ranges

harmony_embeddings = harmony::RunHarmony(joint_atac@reductions$lsi@cell.embeddings, joint_atac@meta.data$dataset)

joint_atac[["harmony"]] = harmony_embeddings
joint_atac@reductions[['harmony']] = CreateDimReducObject(embeddings = harmony_embeddings, key = 'harmony_', assay = 'peak')

joint_atac = RunUMAP(joint_atac, reduction = 'harmony', dims = 2:30)
joint_atac = FindNeighbors(joint_atac, reduction = 'harmony', dims = 2:30, graph.name = "harmony_graph")

joint_atac = FindClusters(joint_atac, verbose = FALSE, algorithm = 3, resolution = 0.8, graph.name = "harmony_graph", cluster.name = "harmony_clusters")
```

```{r, eval=FALSE}
gene_activities = GeneActivity(joint_atac)
joint_atac[["RNA"]] = CreateAssayObject(counts = gene_activities)
joint_atac = NormalizeData(object = joint_atac, 
                           assay = 'RNA', 
                           normalization.method = 'LogNormalize', 
                           scale.factor = median(joint_atac$nCount_RNA))
```

```{r, eval=FALSE}
BM_rna = readRDS("Hegde_2025_Mouse_BM_Nfe2l2_scRNA.rds")
transfer.anchors <- FindTransferAnchors(
  reference = BM_rna, 
  query = joint_atac,
  reduction = 'cca',
  dims = 1:30)

predicted.labels <- TransferData(
  anchorset = transfer.anchors,
  refdata = BM_rna$annots,
  weight.reduction = joint_atac[['harmony']],
  dims = 2:30)

joint_atac = AddMetaData(object = joint_atac, metadata = predicted.labels)

## Remove noisy clusters ----
joint_atac = subset(joint_atac, harmony_clusters %notin% c(10, 13, 15, 17, 19, 20, 21, 22))
joint_atac = RunUMAP(joint_atac, reduction = 'harmony', dims = 2:30)
```

```{r, eval=FALSE}
library(JASPAR2024)

jaspar = JASPAR2024()
sq24 = RSQLite::dbConnect(RSQLite::SQLite(), db(jaspar))
pwms = TFBSTools::getMatrixSet(sq24, list(species = "Mus musculus", matrixtype = "PWM", collection = "CORE"))
sq24 = RSQLite::dbConnect(RSQLite::SQLite(), db(jaspar))

joint_atac = AddMotifs(object = joint_atac, 
                       genome = BSgenome.Mmusculus.UCSC.mm10, 
                       pfm = pwms)
```

```{r, eval=FALSE}
joint_atac <- RunChromVAR(object = joint_atac, genome = BSgenome.Mmusculus.UCSC.mm10)
```

```{r}
joint_atac = readRDS("signac/Hegde_2025_Mouse_BM_Nfe2l2_scATAC.rds")
table(joint_atac$annotated, joint_atac$harmony_clusters)
```

```{r, fig.width=10, fig.height=8}
SCP::CellDimPlot(joint_atac, group.by = "annotated")
```

```{r}
annot_vec = unique(joint_atac$annotated)
holder1 = tibble()
for (i in seq_along(annot_vec)) {
  iter_annot = annot_vec[i]; print(iter_annot)
  
  atac_ss = subset(joint_atac, annotated == iter_annot)
  DefaultAssay(atac_ss) = "peaks"
  Idents(atac_ss) = "dataset"
  atac_ss$dataset = factor(atac_ss$dataset, levels = c("BM_WT", "BM_KO"))
  
  da_peaks = presto::wilcoxauc(atac_ss@assays$peaks$data, y = atac_ss$dataset)
  da_peaks$closest_gene = ClosestFeature(atac_ss, regions = da_peaks$feature)$gene_name
  da_peaks$distance = ClosestFeature(atac_ss, regions = da_peaks$feature)$distance
  
  da_peaks = da_peaks |> 
    dplyr::filter(group == "BM_KO") |>
    separate(feature, into = c("seqnames", "start", "end"), sep = "-") |> 
    mutate(start = as.numeric(start), end = as.numeric(end), 
           ident_name = iter_annot,
           pct_diff = pct_in - pct_out,
           peakID = paste(seqnames, start, end, sep = "-"),
           group_test = iter_annot)
  
  da_peaks <- da_peaks[!grepl("^Gm|^RP|Rik$|Erdr1|Mid1|Ccr1|Rik8$|^a$", da_peaks$closest_gene),]
  da_peaks = da_peaks |> dplyr::filter(closest_gene != "")

  holder1 = bind_rows(holder1, da_peaks)
}

head(holder1)
```

```{r, fig.width=10, fig.height=8}
holder1_filtered = holder1 |> 
  dplyr::filter(padj < 0.05 & abs(logFC) > 0.25 & auc > 0.3) |>
  mutate(direction = case_when(logFC > 0 ~ "up",
                               logFC < 0 ~ "down"))

summary_df = holder1_filtered |> 
  group_by(group_test) |> 
  dplyr::count(direction, name = "dar_count") |>
  dplyr::filter(group_test %in% c("Ly6Clow mono", "Ly6Chi proDC3", "Ly6Chi mono",
                                  "pre-mono", "cMoP", "GP", "GMP", 
                                  "Neu_proNeu", "Neu_preNeu", 
                                  "Neu_immature", "Neu_mature"))

summary_df$group_test = factor(summary_df$group_test, 
                               levels = c("Ly6Clow mono", "Ly6Chi proDC3", "Ly6Chi mono",
                                          "pre-mono", "cMoP", "GP", "GMP", 
                                          "Neu_proNeu", "Neu_preNeu", 
                                          "Neu_immature", "Neu_mature"))

```

```{r, fig.width=10, fig.height=8}
ggplot(summary_df, 
       aes_string(x = "group_test", y = "dar_count", fill = "direction")) +
       geom_bar(stat = "identity", position = "dodge") +
       geom_text(aes(label = dar_count), 
                 position = position_dodge(width = 0.9),
                 vjust = -0.5, size = 4) +
       scale_fill_manual(values = c("up" = "#050708", "down" = "#929391")) +
       scale_y_continuous("DAR count") +
       scale_x_discrete("") +
       theme_minimal(base_size = 14) +
       theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Export

```{r}
joint_atac_bc_annot_df = joint_atac@meta.data |> 
  as.data.frame() |> 
  rownames_to_column("bc") |> 
  dplyr::select(bc, harmony_clusters, annotated)

write.csv(joint_atac_bc_annot_df, 
          file = "signac/Hegde_2025_Mouse_BM_Nfe2l2_scATAC_bc_cluster_annot.csv",
          row.names = F)
```

## Session Info

```{r}
end_time <- Sys.time()
print(end_time - start_time)

sessionInfo()
```
